// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/percona/percona-backup-mongodb/proto/api (interfaces: Api_GetClientsClient)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/percona/percona-backup-mongodb/proto/api"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockApi_GetClientsClient is a mock of Api_GetClientsClient interface
type MockApi_GetClientsClient struct {
	ctrl     *gomock.Controller
	recorder *MockApi_GetClientsClientMockRecorder
}

// MockApi_GetClientsClientMockRecorder is the mock recorder for MockApi_GetClientsClient
type MockApi_GetClientsClientMockRecorder struct {
	mock *MockApi_GetClientsClient
}

// NewMockApi_GetClientsClient creates a new mock instance
func NewMockApi_GetClientsClient(ctrl *gomock.Controller) *MockApi_GetClientsClient {
	mock := &MockApi_GetClientsClient{ctrl: ctrl}
	mock.recorder = &MockApi_GetClientsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApi_GetClientsClient) EXPECT() *MockApi_GetClientsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockApi_GetClientsClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockApi_GetClientsClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockApi_GetClientsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockApi_GetClientsClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockApi_GetClientsClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockApi_GetClientsClient)(nil).Context))
}

// Header mocks base method
func (m *MockApi_GetClientsClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockApi_GetClientsClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockApi_GetClientsClient)(nil).Header))
}

// Recv mocks base method
func (m *MockApi_GetClientsClient) Recv() (*api.Client, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*api.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockApi_GetClientsClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockApi_GetClientsClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockApi_GetClientsClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockApi_GetClientsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockApi_GetClientsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockApi_GetClientsClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockApi_GetClientsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockApi_GetClientsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockApi_GetClientsClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockApi_GetClientsClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockApi_GetClientsClient)(nil).Trailer))
}
