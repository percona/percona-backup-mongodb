// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/percona/percona-backup-mongodb/proto/api (interfaces: ApiServer)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/percona/percona-backup-mongodb/proto/api"
	messages "github.com/percona/percona-backup-mongodb/proto/messages"
	reflect "reflect"
)

// MockApiServer is a mock of ApiServer interface
type MockApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockApiServerMockRecorder
}

// MockApiServerMockRecorder is the mock recorder for MockApiServer
type MockApiServerMockRecorder struct {
	mock *MockApiServer
}

// NewMockApiServer creates a new mock instance
func NewMockApiServer(ctrl *gomock.Controller) *MockApiServer {
	mock := &MockApiServer{ctrl: ctrl}
	mock.recorder = &MockApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiServer) EXPECT() *MockApiServerMockRecorder {
	return m.recorder
}

// BackupsMetadata mocks base method
func (m *MockApiServer) BackupsMetadata(arg0 *api.BackupsMetadataParams, arg1 api.Api_BackupsMetadataServer) error {
	ret := m.ctrl.Call(m, "BackupsMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BackupsMetadata indicates an expected call of BackupsMetadata
func (mr *MockApiServerMockRecorder) BackupsMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackupsMetadata", reflect.TypeOf((*MockApiServer)(nil).BackupsMetadata), arg0, arg1)
}

// GetClients mocks base method
func (m *MockApiServer) GetClients(arg0 *api.Empty, arg1 api.Api_GetClientsServer) error {
	ret := m.ctrl.Call(m, "GetClients", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClients indicates an expected call of GetClients
func (mr *MockApiServerMockRecorder) GetClients(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClients", reflect.TypeOf((*MockApiServer)(nil).GetClients), arg0, arg1)
}

// LastBackupMetadata mocks base method
func (m *MockApiServer) LastBackupMetadata(arg0 context.Context, arg1 *api.LastBackupMetadataParams) (*messages.BackupMetadata, error) {
	ret := m.ctrl.Call(m, "LastBackupMetadata", arg0, arg1)
	ret0, _ := ret[0].(*messages.BackupMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBackupMetadata indicates an expected call of LastBackupMetadata
func (mr *MockApiServerMockRecorder) LastBackupMetadata(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBackupMetadata", reflect.TypeOf((*MockApiServer)(nil).LastBackupMetadata), arg0, arg1)
}

// RunBackup mocks base method
func (m *MockApiServer) RunBackup(arg0 context.Context, arg1 *api.RunBackupParams) (*api.Error, error) {
	ret := m.ctrl.Call(m, "RunBackup", arg0, arg1)
	ret0, _ := ret[0].(*api.Error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunBackup indicates an expected call of RunBackup
func (mr *MockApiServerMockRecorder) RunBackup(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunBackup", reflect.TypeOf((*MockApiServer)(nil).RunBackup), arg0, arg1)
}

// RunRestore mocks base method
func (m *MockApiServer) RunRestore(arg0 context.Context, arg1 *api.RunRestoreParams) (*api.RunRestoreResponse, error) {
	ret := m.ctrl.Call(m, "RunRestore", arg0, arg1)
	ret0, _ := ret[0].(*api.RunRestoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunRestore indicates an expected call of RunRestore
func (mr *MockApiServerMockRecorder) RunRestore(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRestore", reflect.TypeOf((*MockApiServer)(nil).RunRestore), arg0, arg1)
}
