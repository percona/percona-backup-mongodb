// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/percona/percona-backup-mongodb/proto/messages (interfaces: Messages_MessagesChatClient)

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	messages "github.com/percona/percona-backup-mongodb/proto/messages"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockMessages_MessagesChatClient is a mock of Messages_MessagesChatClient interface
type MockMessages_MessagesChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessages_MessagesChatClientMockRecorder
}

// MockMessages_MessagesChatClientMockRecorder is the mock recorder for MockMessages_MessagesChatClient
type MockMessages_MessagesChatClientMockRecorder struct {
	mock *MockMessages_MessagesChatClient
}

// NewMockMessages_MessagesChatClient creates a new mock instance
func NewMockMessages_MessagesChatClient(ctrl *gomock.Controller) *MockMessages_MessagesChatClient {
	mock := &MockMessages_MessagesChatClient{ctrl: ctrl}
	mock.recorder = &MockMessages_MessagesChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessages_MessagesChatClient) EXPECT() *MockMessages_MessagesChatClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockMessages_MessagesChatClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockMessages_MessagesChatClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockMessages_MessagesChatClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockMessages_MessagesChatClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).Context))
}

// Header mocks base method
func (m *MockMessages_MessagesChatClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockMessages_MessagesChatClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).Header))
}

// Recv mocks base method
func (m *MockMessages_MessagesChatClient) Recv() (*messages.ServerMessage, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*messages.ServerMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockMessages_MessagesChatClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockMessages_MessagesChatClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockMessages_MessagesChatClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockMessages_MessagesChatClient) Send(arg0 *messages.ClientMessage) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockMessages_MessagesChatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockMessages_MessagesChatClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockMessages_MessagesChatClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockMessages_MessagesChatClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockMessages_MessagesChatClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMessages_MessagesChatClient)(nil).Trailer))
}
