// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/percona/percona-backup-mongodb/proto/messages (interfaces: Messages_MessagesChatServer)

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	messages "github.com/percona/percona-backup-mongodb/proto/messages"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockMessages_MessagesChatServer is a mock of Messages_MessagesChatServer interface
type MockMessages_MessagesChatServer struct {
	ctrl     *gomock.Controller
	recorder *MockMessages_MessagesChatServerMockRecorder
}

// MockMessages_MessagesChatServerMockRecorder is the mock recorder for MockMessages_MessagesChatServer
type MockMessages_MessagesChatServerMockRecorder struct {
	mock *MockMessages_MessagesChatServer
}

// NewMockMessages_MessagesChatServer creates a new mock instance
func NewMockMessages_MessagesChatServer(ctrl *gomock.Controller) *MockMessages_MessagesChatServer {
	mock := &MockMessages_MessagesChatServer{ctrl: ctrl}
	mock.recorder = &MockMessages_MessagesChatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessages_MessagesChatServer) EXPECT() *MockMessages_MessagesChatServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockMessages_MessagesChatServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockMessages_MessagesChatServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).Context))
}

// Recv mocks base method
func (m *MockMessages_MessagesChatServer) Recv() (*messages.ClientMessage, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*messages.ClientMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockMessages_MessagesChatServerMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockMessages_MessagesChatServer) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockMessages_MessagesChatServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockMessages_MessagesChatServer) Send(arg0 *messages.ServerMessage) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockMessages_MessagesChatServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockMessages_MessagesChatServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockMessages_MessagesChatServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockMessages_MessagesChatServer) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockMessages_MessagesChatServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockMessages_MessagesChatServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockMessages_MessagesChatServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockMessages_MessagesChatServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockMessages_MessagesChatServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMessages_MessagesChatServer)(nil).SetTrailer), arg0)
}
