// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/percona/percona-backup-mongodb/proto/messages (interfaces: MessagesClient)

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	messages "github.com/percona/percona-backup-mongodb/proto/messages"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockMessagesClient is a mock of MessagesClient interface
type MockMessagesClient struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesClientMockRecorder
}

// MockMessagesClientMockRecorder is the mock recorder for MockMessagesClient
type MockMessagesClientMockRecorder struct {
	mock *MockMessagesClient
}

// NewMockMessagesClient creates a new mock instance
func NewMockMessagesClient(ctrl *gomock.Controller) *MockMessagesClient {
	mock := &MockMessagesClient{ctrl: ctrl}
	mock.recorder = &MockMessagesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMessagesClient) EXPECT() *MockMessagesClientMockRecorder {
	return m.recorder
}

// MessagesChat mocks base method
func (m *MockMessagesClient) MessagesChat(arg0 context.Context, arg1 ...grpc.CallOption) (messages.Messages_MessagesChatClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MessagesChat", varargs...)
	ret0, _ := ret[0].(messages.Messages_MessagesChatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MessagesChat indicates an expected call of MessagesChat
func (mr *MockMessagesClientMockRecorder) MessagesChat(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessagesChat", reflect.TypeOf((*MockMessagesClient)(nil).MessagesChat), varargs...)
}
