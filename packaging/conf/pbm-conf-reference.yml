######################## PBM Configuration ############################

## This file is a full configuration example documenting all
## options in comments.
##
## You can find the full reference for configuration options here:
## https://docs.percona.com/percona-backup-mongodb/reference/configuration-options.html

#======================Storage Configuration============================

#storage:

##  Remote backup storage type. Supported types: S3, GCS, shared filesystem, Azure


#---------------------S3 Storage Configuration--------------------------
#  type:
#    s3:

## Specify the location and name of the bucket that you have configured on the S3
#      region:
#      bucket:

## The data directory to store backups in.
## When undefined, backups are saved at the root of the bucket.
#      prefix:

## An optional custom URL to access the bucket. Useful for S3-compatible storage (e.g. MinIO)
#      endpointUrl:

## S3 access credentials.
#      credentials:
#        access-key-id:
#        secret-access-key:
#        session-token:

## The size of data chinks (in MB) to upload to the bucket.
#      uploadPartSize: 10

## Data upload configuration
#      maxUploadParts: 10,000

## Set the storage classes for data objects in the bucket.
## If undefined, the default STANDARD object will be used.
#      storageClass:

## Allow PBM to upload data to storage with self-issued TLS certificates.
## Use it with caution as it might leave a hole for man-in-the-middle attacks.
#      insecureSkipTLSVerify:

## Debug level logging configuration for S3 requests.
#      debugLogLevels:

## Server-side encryption options.
#      serverSideEncryption:
#        sseAlgorithm: aws:kms
#        kmsKeyID:

## Options for server-side encryption with customer-provided keys stored
## on the client side
#        sseCustomerAlgorithm: AES256
#        sseCustomerKey:

## Retry upload configuration options.
#      retryer:
#        numMaxRetries: 3
#        minRetryDelay: 30
#        maxRetryDelay: 5
#
## The maximum object size that will be stored on the storage
#      maxObjSizeGB: 5018

#--------------------Google Cloud Storage Configuration-----------------

#  type:
#    gcs:

## The location and name of the bucket that you have configured on the GCS
#      bucket: pbm-testing

## The data directory to store backups in.
## When undefined, backups are saved at the root of the bucket.
#      prefix:

## The size of data chunks in bytes to be uploaded to the storage bucket in a single request.
#      chunkSize: 10MB

## GCS access credentials. You can use either HMAC or Service Account keys.
## HMAC Example:
#     credentials:
#       hmacAccessKey: GOOG1E7GHK2...
#       hmacSecret: U7PCRkLy...

## Service Account Example:
#     credentials:
#       clientEmail: account@dev-sandbox.iam.gserviceaccount.com
#       privateKey: "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBg...kqh3vNY2NQ=\n-----END PRIVATE KEY-----\n"
#

## Retry upload configuration options.
#      retryer:
#        backoffInitial: 1
#        backoffMax: 30
#        backoffMultiplier: 2
#
## The maximum object size that will be stored on the storage
#      maxObjSizeGB: 5018

#--------------------Filesystem Configuration---------------------------
#  type:
#    filesystem:

## The path to backup directory
#      path:
#
## The maximum object size that will be stored on the storage
#      maxObjSizeGB: 5018

#--------------------Microsoft Azure Configuration-----------------------
#  type:
#    azure:

## Azure storage account and container name
#      account:
#      container:

## Where to store data in the container
#      prefix:

## Specify the access key
#      credentials:
#        key:
#
## The maximum object size that will be stored on the storage
#      maxObjSizeGB: 194560

#====================Point-in-Time Recovery Configuration==================

#pitr:
#  enabled: false

## Adjust the size of oplog chunks (in minutes).
#  oplogSpanMin: 10

## Set a compression method and level
#  compression:
#  compressionLevel:

## Save oplog slicing without the base backup
#  oplogOnly: false

## Node priority for saving oplog slices. The highest priority node is used.
## Nodes with the same priority are randomly elected for saving oplog slices.
#  priority:


#==========================Backup Configuration============================

## Adjust priority of mongod nodes for making backups. The highest priority
## node is making a backup.
## Nodes with the same priority are randomly elected for a backup.
#backup:
#  priority:

## Set a compression method and level
#  compression:
#  compressionLevel:

## The wait time (in seconds) for PBM to start backups.
## This timeout controls how long PBM waits for the backup to
## transition from initial state to running status.
#  timeouts:
#    startingStatus: 33

## Adjust the size of oplog chunks saved within a logical backup snapshot (in minutes).
#  oplogSpanMin: 10

## Set the number of parallel collections to process during a logical backup.
## Default value is half of the number of CPU cores.
#  numParallelCollections:


#==========================Restore Configuration===========================

## Options to adjust the memory consumption in environments with tight memory bounds.
#restore:
#  batchSize: 500
#  numInsertionWorkers: 10
#  numParallelCollections:

## Set the number of parallel collections to process during a logical restore.
## Default value is half of the number of CPU cores.
#  numParallelCollections:

## Adjust concurrent download of data chunks from storage for physical restore.
#  numDownloadWorkers:
#  maxDownloadBufferMb:
#  downloadChunkMb: 32

## Specify the custom path to the mongod binaries for the entire deployment/
# individual nodes for database restarts during physical restore
#  mongodLocation:
#  mongodLocationMap:
#    "node-name:port":"path"

#=========================Logging Configuration==============================

## Options to adjust logging configuration for starting pbm-agents
#log:

## The path to the log file. If PBM cannot write logs to the specified path it defaults to '/dev/stderr'
#  path: "/var/log/pbm.json"

## The log level. Supported values: debug, info, warn, error, fatal.
#  level: info

## Output logs in JSON format.
#  json: true

