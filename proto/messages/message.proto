// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.messages";
option java_outer_classname = "MessagesProto";

package messages;

service Messages {
  rpc MessagesChat(stream ClientMessage) returns (stream ServerMessage) {}
  rpc DBBackupFinished(DBBackupFinishStatus) returns (Ack) {}
  rpc OplogBackupFinished(OplogBackupFinishStatus) returns (Ack) {}
}

enum ErrorType {
   NO_ERROR                  = 0;
   NOT_IMPLEMENTED_YET       = 1;
   COMMUNICATION_ERROR       = 2;
   CLIENT_ALREADY_REGISTERED = 3;
}

enum BackupType {
   LOGICAL   = 0;
   HOTBACKUP = 1;
}

enum DestinationType {
   FILE = 0; 
   AWS  = 1;
}

enum CompressionType {
   NO_COMPRESSION = 0;
   GZIP           = 1;
   SNAPPY         = 2;
   LZ4            = 3;
}

enum Cypher {
    NO_CYPHER = 0;
    AES       = 1;
    DES       = 2;
    RC4       = 3;
    RSA       = 4;
}

enum NodeType {
    UNDEFINED        = 0; 
    MONGOD           = 1; // mongod without replication enabled. We should ignore this nodetype at backup-time as it has no oplog (but still send it in the Register message)
    MONGOD_REPLSET   = 2; // mongod with replication enabled and no sharding
    MONGOD_SHARDSVR  = 3; // mongod that is a shard server
    MONGOD_CONFIGSVR = 4; // mongod that is a sharding config serve
    MONGOS           = 5; // mongos that is a sharding router
}

message Ack {}

message Error {
  string Message = 1;
  ErrorType Code = 2;
}

message ServerMessage {
  enum MessageType {
      ERROR             = 0;
      ACK               = 1;
      PING              = 2;
      REGISTRATION_OK   = 3;
      START_BACKUP      = 4;
      STOP_BACKUP       = 5;
      GET_STATUS        = 6;
      GET_BACKUP_SOURCE = 7;
      STOP_OPLOG_TAIL   = 8;
      reserved 9 to 99;
  }
  
  int32       version = 1;
  MessageType type    = 2;
  oneof Payload {
    Ack                 AckMsg           = 3;
    Error               ErrorMsg         = 4;
    StartBackup         StartBackupMsg   = 5;
    StopBackup          StopBackupMsg    = 6;
    StopOplogTail       StopOplogTailMsg = 7;
  }
}

message StartBackup {
  BackupType      BackupType      = 1;
  DestinationType DestinationType = 2;
  string          DestinationName = 3;
  string          DestinationDir  = 4; // This is also used as S3 bucket name
  CompressionType CompressionType = 5;
  Cypher          Cypher          = 6;
  int64           OplogStartTime  = 7;
}

message StopBackup {
}

message StopOplogTail {
}

message ClientMessage {
  enum MessageType {
      ERROR          = 0;
      ACK            = 1;
      PONG           = 2;
      REGISTER       = 3;
      BACKUP_STARTED = 4;
      BACKUP_FINISH  = 5;
      STATUS         = 6;
      BACKUP_SOURCE  = 7;
      reserved 8 to 99;
  }
  
  int32       version  = 1;
  MessageType type     = 2;
  string      clientID = 3;
  oneof Payload {
    Ack                     AckMsg            = 4;
    string                  ErrorMsg          = 5;
    string                  BackupSourceMsg   = 6;
    Register                RegisterMsg       = 7;
    Pong                    PingMsg           = 8;
    DBBackupFinishStatus    BackupFinishedMsg = 9;
    OplogBackupFinishStatus OplogFinishedMsg  = 10;
    Status                  StatusMsg         = 11;
  }
}

message DBBackupFinishStatus {
    string ClientID = 1;
    bool   OK       = 2;
    int64  Ts       = 3;
    string Error    = 4;
}

message OplogBackupFinishStatus {
    string ClientID = 1;
    bool   OK       = 2;
    int64  Ts       = 3;
    string Error    = 4;
}

message Register {
  NodeType NodeType     = 1;
  string NodeName       = 2;
  string ClusterID      = 3; // This field will hold a bson.ObjectIdHex
  string ReplicasetID   = 4;
  string ReplicasetName = 5;
}

message Pong {
  int64 Timestamp = 1;
}

message Status {
  bool       DBBackUpRunning    = 1;
  bool       OplogBackupRunning = 2;
  BackupType BackupType         = 3;
  uint64     BytesSent          = 4;
  int64      LastOplogTs        = 5;
  int64      BackupCompleted    = 6; // TS when the backup has finish
  string     LastError          = 7;
  uint64     ReplicasetVersion  = 8;
  //
  DestinationType DestinationType    = 9;
  string          DestinationName    = 10;
  string          DestinationDir     = 11; // This is also used as S3 bucket name
  CompressionType CompressionType    = 12;
  Cypher          Cypher             = 13;
  int64           OplogStartTime     = 14;
}
