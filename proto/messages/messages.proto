syntax = "proto3";
// This is needed to be able to use "import" in the API
option go_package = "github.com/percona/percona-backup-mongodb/proto/messages";

option java_multiple_files = true;
option java_package = "com.messages";
option java_outer_classname = "MessagesProto";

package messages;

service Messages {
  // streams
  rpc Logging(stream LogEntry) returns (Ack) {}
  rpc MessagesChat(stream ClientMessage) returns (stream ServerMessage) {}
  // Invidividual responses
  rpc DBBackupFinished(DBBackupFinishStatus) returns (DBBackupFinishedAck) {}
  rpc OplogBackupFinished(OplogBackupFinishStatus) returns (OplogBackupFinishedAck) {}
  rpc RestoreCompleted(RestoreComplete) returns (RestoreCompletedAck) {}
}

enum ErrorType {
  ERROR_TYPE_INVALID                   = 0;
  ERROR_TYPE_NOT_IMPLEMENTED_YET       = 1;
  ERROR_TYPE_COMMUNICATION_ERROR       = 2;
  ERROR_TYPE_CLIENT_ALREADY_REGISTERED = 3;
}

enum BackupType {
  BACKUP_TYPE_INVALID   = 0;
  BACKUP_TYPE_LOGICAL   = 1;
  BACKUP_TYPE_HOTBACKUP = 2;
}

enum DestinationType {
  DESTINATION_TYPE_INVALID = 0;
  DESTINATION_TYPE_FILE    = 1; 
  DESTINATION_TYPE_AWS     = 2;
}

enum CompressionType {
  COMPRESSION_TYPE_INVALID        = 0;
  COMPRESSION_TYPE_NO_COMPRESSION = 1;
  COMPRESSION_TYPE_GZIP           = 2;
  COMPRESSION_TYPE_SNAPPY         = 3;
  COMPRESSION_TYPE_LZ4            = 4;
}

enum Cypher {
  CYPHER_INVALID   = 0;
  CYPHER_NO_CYPHER = 1;
  CYPHER_AES       = 2;
  CYPHER_DES       = 3;
  CYPHER_RC4       = 4;
  CYPHER_RSA       = 5;
}

enum NodeType {
  NODE_TYPE_INVALID          = 0; 
  NODE_TYPE_MONGOD           = 1; // mongod without replication enabled. We should ignore this nodetype at backup-time as it has no oplog (but still send it in the Register message)
  NODE_TYPE_MONGOD_REPLSET   = 2; // mongod with replication enabled and no sharding
  NODE_TYPE_MONGOD_SHARDSVR  = 3; // mongod that is a shard server
  NODE_TYPE_MONGOD_CONFIGSVR = 4; // mongod that is a sharding config serve
  NODE_TYPE_MONGOS           = 5; // mongos that is a sharding router
}

enum RestoreStatus {
  RESTORE_STATUS_INVALID        = 0;
  RESTORE_STATUS_NOT_RUNNING    = 1;
  RESTORE_STATUS_RESTORINGDB    = 2;
  RESTORE_STATUS_RESTORINGOPLOG = 3;
}

message Ack {}
message CancelBackup {}
message DBBackupFinishedAck {}
message Empty {}
message GetBackupSource {}
message GetStatus {}
message ListReplicasets {}
message GetLastOplogTs {}
message OplogBackupFinishedAck {}
message Ping {}
message RestoreCompletedAck {}
message StartBalancer {}
message StopBalancer {}

message BackupMetadata {
  int64                           start_ts         = 1;
  int64                           end_ts           = 2;
  BackupType                      backup_type      = 3;
  int64                           oplog_start_time = 4;
  int64                           last_oplog_ts    = 5;
  DestinationType                 destination_type = 6;
  string                          destination_dir  = 7;
  Cypher                          cypher           = 8;
  CompressionType                 compression_type = 9;
  string                          description      = 10;
  map<string, ReplicasetMetadata> replicasets      = 11;
}

message Error {
  string    message = 1;
  ErrorType code    = 2;
}

message LastOplogTs {
  int64 last_oplog_ts = 1;
}

message LogEntry {
  string client_id = 1;
  uint32 level     = 2;
  int64  ts        = 3;
  string message   = 4;
}

message ReplicasetMetadata {
  string cluster_id        = 1;
  string replicaset_uuid   = 2;
  string replicaset_name   = 3;
  string db_backup_name    = 4;
  string oplog_backup_name = 5;
}

message RestoreBackup {
  BackupType      backup_type          = 1;
  DestinationType source_type          = 2;
  string          source_bucket        = 3; // This is also used as S3 bucket name
  string          db_source_name       = 4;
  string          oplog_source_name    = 5;
  CompressionType compression_type     = 6;
  Cypher          cypher               = 7;
  int64           oplog_start_time     = 8;
  bool            skip_users_and_roles = 9; // Used only for testing
}

message RestoreComplete {
  string client_id = 1;
  Error  err       = 2;
}

message StartBackup {
  BackupType      backup_type       = 1;
  DestinationType destination_type  = 2;
  string          name_prefix       = 3; 
  string          db_backup_name    = 4;
  string          oplog_backup_name = 5;
  string          destination_dir   = 6; // This is also used as S3 bucket name
  CompressionType compression_type  = 7;
  Cypher          cypher            = 8;
  int64           oplog_start_time  = 9;
  string          description       = 10;
}

message StopOplogTail {
  int64 ts = 1;
}

message ServerMessage {
  int32                 version             = 1;
  oneof payload {
    Ack                 ack_msg             = 2;
    CancelBackup        cancel_backup_msg   = 3;
    Error               error_msg           = 4;
    GetBackupSource     backup_source_msg   = 5;
    GetStatus           get_status_msg      = 6;
    ListReplicasets     list_replicasets    = 7;
    GetLastOplogTs      last_oplog_ts       = 8;
    Ping                ping_msg            = 9;
    RestoreBackup       restore_backup_msg  = 10;
    StartBackup         start_backup_msg    = 11;
    StartBalancer       start_balancer_msg  = 12;
    StopBalancer        stop_balancer_msg   = 13;
    StopOplogTail       stop_oplog_tail_msg = 14;
  }
}

message ClientMessage {
  int32                     version             = 1;
  string                    client_id           = 2;
  oneof payload {
    Ack                     ack_msg             = 3;
    BackupSource            backup_source_msg   = 4;
    DBBackupFinishStatus    backup_finished_msg = 5;
    Error                   error_msg           = 6;
    OplogBackupFinishStatus oplog_finished_msg  = 7; 
    LastOplogTs             last_oplog_ts       = 8;
    Pong                    pong_msg            = 9;
    Register                register_msg        = 10;
    Replicasets             replicasets_msg     = 11;
    Status                  status_msg          = 12;
  }
}

message BackupSource {
  string source_client = 1;
}

message DBBackupFinishStatus {
  string client_id = 1;
  bool   ok        = 2;
  int64  ts        = 3;
  string error     = 4;
}

message OplogBackupFinishStatus {
  string client_id = 1;
  bool   ok        = 2;
  int64  ts        = 3;
  string error     = 4;
}

message Register {
  NodeType node_type       = 1;
  string   node_name       = 2;
  string   cluster_id      = 3; // This field will hold a bson.ObjectIdHex
  string   replicaset_id   = 4;
  string   replicaset_name = 5;
  string   backup_dir      = 6;
  bool     is_primary      = 7;
  bool     is_secondary    = 8;
}

message Pong {
  int64    timestamp             = 1;
  NodeType node_type             = 2;
  string   replica_set_uuid      = 3;
  int32    replica_set_version   = 4;
  bool     is_primary            = 5;
  bool     is_secondary          = 6;
  bool     is_tailing            = 7;
  int64    last_tailed_timestamp = 8;
}

message Replicasets {
  repeated string replicasets = 1;
}

message Status {
  bool            running_db_backup    = 1;
  bool            running_oplog_backup = 2;
  RestoreStatus   restore_status       = 3;
  BackupType      backup_type          = 4;
  uint64          bytes_sent           = 5;
  int64           last_oplog_ts        = 6;
  int64           backup_completed     = 7; // TS when the backup has finish
  string          last_error           = 8;
  uint64          replicaset_version   = 9;
  DestinationType destination_type     = 10;
  string          destination_name     = 11;
  string          destination_dir      = 12; // This is also used as S3 bucket name
  CompressionType compression_type     = 13;
  Cypher          cypher               = 14;
  int64           start_oplog_ts       = 15;
}
